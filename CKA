#Question 1:

vi q1.yaml

apiVersion: v1
kind: Pod
metadata:
  name: web-pod
spec:
  containers:
  - name: busybox
    image: busybox
    command: ['sh', '-c', 'sleep 3200']
    securityContext:
      capabilities:
        add:
        - SYS_TIME
:wq


#Question 2:

vi q2.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: myproject
spec:
  replicas: 1
  selector:
    matchLabels:
      app: myproject
  template:
    metadata:
      labels:
        app: myproject
    spec:
      containers:
      - name: nginx
        image: nginx:1.16
:wq

kubectl annotate deployment/myproject kubernetes.io/change-cause="image created to 1.16"
kubectl set image deployment/myproject nginx=nginx:1.17
kubectl annotate deployment/myproject kubernetes.io/change-cause="image updated to 1.17"
kubectl rollout status deployment/myproject
kubectl rollout history deployment/myproject

#Question 3:

vi q3.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: my-deployment
  template:
    metadata:
      labels:
        app: my-deployment
    spec:
      containers:
      - name: nginx
        image: nginx:latest
:wq


Question 4:

vi q4.yaml

apiVersion: v1
kind: Pod
metadata:
  name: web-nginx
  labels:
    tier: web-app
spec:
  containers:
  - name: nginx
    image: nginx:1.17
:wq


kubectl get pods --selector=tier=web-app
kubectl describe pod web-nginx


Question 5:

vi q5.yaml

apiVersion: v1
kind: Pod
metadata:
  name: static-pod-nginx
spec:
  nodeName: worker1
  containers:
  - name: nginx
    image: nginx
:wq



Question 6:

vi q6.yaml

apiVersion: v1
kind: Pod
metadata:
  name: pod-multi
spec:
  containers:
  - name: container1
    image: nginx
  - name: container2
    image: busybox
    command: ["sleep", "4800"]
:wq



Question 7:

vi q7.yaml
apiVersion: v1
kind: Pod
metadata:
  name: test-pod
  namespace: custom
  labels:
    env: test
    tier: backend
spec:
  containers:
  - name: nginx
    image: nginx:1.17

:wq

kubectl create namespace custom

Question 8:

kubectl run output-pod --image=busybox --restart=Never -it --rm --restart=Never -- /bin/sh -c 'echo You Have Passed Your CKA Exam' > output-pod.txt


Question 9:

vi q9.yaml
apiVersion: v1
kind: Pod
metadata:
  name: my-app
spec:
  containers:
  - name: my-app-container
    image: nginx
    ports:
    - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: my-app-service
spec:
  selector:
    app: my-app
  ports:
  - protocol: TCP
    port: 30010
    nodePort: 30010
    targetPort: 80
  type: LoadBalancer
:wq



Question 10:

kubectl get nodes worker1 -o json > node-info.json


Question 11:

kubectl  get nodes  -o jsonpath='{.items[*].metadata.labels.kubernetes\.io/hostname}' -o jsonpath='{.items[*].status.nodeInfo.osImage}'


Question 12:


vi q12.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-demo
spec:
  capacity:
    storage: 100Mi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: /pv/host-data
:wq


Question: 13

vi q13.yaml

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: nginxapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.18
:wq


Question: 14

kubectl create ns ns-nginx
kubectl -n ns-nginx create deployment nginx-deploy --replicas=3 --image=nginx:1.22
kubectl -n ns-nginx rollout status deployment/nginx-deploy
kubectl -n ns-nginx get deploy
kubectl -n ns-nginx get pods -o wide



Question: 15

Troubleshooting. Please check the video


Question: 16

Troubleshooting. Please check the video

kubectl  create deployment nginx-deploy --replicas=1 --image=nginx:1.22
kubectl describe pod/nginx-deploy-7455bbdd-b44jd
kubectl  describe nodes worker1 |grep -i taint
kubectl  describe nodes worker2 |grep -i taint
kubectl edit deployment.apps/nginx-deploy

      tolerations:
      - effect: NoExecute
        key: color
        operator: Equal
        value: blue



Question: 17


kubectl taint nodes worker1 key=unschedulable:NoSchedule

vi q17.yaml
apiVersion: v1
kind: Pod
metadata:
  name: dev-redis
spec:
  containers:
  - name: redis
    image: redis:alpine
:wq

vi q17-1.yaml

apiVersion: v1
kind: Pod
metadata:
  name: prod-redis
spec:
  containers:
  - name: redis
    image: redis:alpine
  tolerations:
  - key: "key"
    operator: "Equal"
    value: "unschedulable"
    effect: "NoSchedule"
:wq


Question: 18

vi q18.yaml

apiVersion: v1 
kind: Pod 
metadata:
  name:  non-root-pod 
spec:
  securityContext: 
    runAsUser:  1000
    fsGroup:  2000 
  containers:
  -  name:  non-root-pod
:wq



Question: 19

q19.yaml:

apiVersion: v1
kind: Pod
metadata:
  name: hostpath-pod
spec:
  containers:
  - name: test-container
    image: busybox
    command: [ "sh", "-c", "sleep 3600" ]
    volumeMounts:
    - mountPath: /data
      name: hostpath-volume
  volumes:
  - name: hostpath-volume
    hostPath:
      path: /pv/host-data/
      type: Directory
:wq

kubectl apply -f pv-pod.yaml
kubectl exec pv-pod -- ls /data



Question 20:


q20.yaml:

apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-data
spec:
  storageClassName: "local"
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/pv/host-data/"


q20-1.yaml:

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-data
spec:
  storageClassName: "local"
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi


q20-2.yaml:

apiVersion: v1
kind: Pod
metadata:
  labels:
    run: pvc-pod
  name: pvc-pod
spec:
  containers:
  - image: busybox:latest
    name: pvc-pod
    args:
      - sleep
      - "3600"
    volumeMounts:
    - name: data
      mountPath: "/data"
  volumes:
  - name: data
    persistentVolumeClaim:
      claimName: pvc-data
:wq

kubectl apply -f pv-data.yaml
kubectl apply -f pvc-data.yaml
kubectl apply -f pvc-pod.yaml
kubectl get pv
kubectl get pvc
kubectl exec pvc-pod -- ls /data/
kubectl exec pvc-pod -- touch /data/file2
kubectl delete -f pvc-pod.yaml
kubectl apply -f pvc-pod-2.yaml
kubectl exec pvc-pod-2 -- ls /data/


Question 21:


kubectl scale deployment nginx-deploy --replicas=5
kubectl rollout status deployment nginx-deploy
kubectl get deploy
kubectl get pods -o wide
kubectl edit deployment/nginx-deploy
kubectl get replicaset
kubectl get pods -o wide


Questions 22:

kubectl rollout history deployment nginx-deploy
kubectl rollout undo deployment nginx-deploy
kubectl get replicaset
kubectl get pods -o wide
kubectl get pods nginx-deploy-57767fb8cf-zklv4 -o jsonpath='{.spec.containers[0].image}'


Questions 23:

vi q23.yaml

apiVersion: v1
kind: Pod
metadata:
  labels:
    run: envvar
  name: envvar
spec:
  containers:
  - image: busybox:latest
    name: envvar
    args:
      - sleep
      - "3600"
    env:
      - name: PLANET
        value: "blue"
:wq

kubectl apply -f q23.yaml
kubectl exec envvar -- env | grep PLANET


Question 24:

kubectl create configmap space --from-literal=planet=blue --from-literal=moon=white

vi q24.yaml

apiVersion: v1
kind: Pod
metadata:
  labels:
    run: configenvvar
  name: configenvvar
spec:
  containers:
  - image: busybox:latest
    name: configenvvar
    args:
      - sleep
      - "3600"
    env:
      - name: planet
        valueFrom:
          configMapKeyRef:
            name: space
            key: planet
      - name: moon
        valueFrom:
         configMapKeyRef:
            name: space
            key: moon
:wq

kubectl apply -f q24.yaml
kubectl exec configenvvar -- env | grep -E "planet|moon"


Question 25:

vi system.conf
planet=blue
moon=white
:wq

vi Q25.yaml

apiVersion: v1
kind: Pod
metadata:
  labels:
    run: confvolume
  name: confvolume
spec:
  containers:
  - image: busybox:latest
    name: confvolume
    args:
      - sleep
      - "3600"
    volumeMounts:
      - name: system
        mountPath: /etc/system.conf
        subPath: system.conf
    resources: {}
  volumes:
  - name: system
    configMap:
      name: space-system
:wq

kubectl create configmap space-system --from-file=system.conf
kubectl apply -f q25.yaml
kubectl exec confvolume -- cat /etc/system.conf


Question 26:


echo -n 'admin' > username
echo -n 'admin-pass' > password

kubectl create secret generic admin-cred --from-file=username --from-file=password

vi q26.yaml

apiVersion: v1
kind: Pod
metadata:
  labels:
    run: secretenv
  name: secretenv
spec:
  containers:
  - image: busybox:latest
    name: secretenv
    args:
      - sleep
      - "3600"
    env:
      - name: username
        valueFrom:
          secretKeyRef:
            name: admin-cred
            key: username
      - name: password
        valueFrom:
          secretKeyRef:
            name: admin-cred
            key: password
:wq

kubectl exec secretenv -- env | grep -E "USERNAME|PASSWORD"


vi 26-1.yaml

apiVersion: v1
kind: Pod
metadata:
  labels:
    run: secretvolume
  name: secretvolume
spec:
  containers:
  - image: busybox:latest
    name: secretvolume
    args:
      - sleep
      - "3600"
    volumeMounts:
      - name: admincred
        mountPath: /etc/admin-cred
        readOnly: true
  volumes:
  - name: admincred
    secret:
      secretName: admin-cred
:wq

kubectl exec secretvolume -- ls /etc/admin-cred
kubectl exec secretvolume -- cat /etc/admin-cred/username
kubectl exec secretvolume -- cat /etc/admin-cred/password



Question 27

kubectl create deployment scalable --image=nginx:latest
kubectl get deployment
kubectl scale deployment scalable --replicas=4
kubectl get deployment
kubectl get pods -o wide



Question 28

vi 28.yaml

apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    type: daemon
  name: daemontest
spec:
  selector:
    matchLabels:
      run: daemon
  template:
    metadata:
      labels:
        run: daemon
      name: daemonpod
    spec:
      containers:
      - image: busybox:latest
        name: daemonpod
        args:
          - sleep
          - "3600"
:wq

kubectl apply -f daemonset.yaml
kubectl get pods -o wide



Question 29:


vi q29.yaml

apiVersion: v1
kind: Pod
metadata:
  labels:
    run: podquota
  name: podquota
spec:
  containers:
  - image: busybox:latest
    name: podquota
    args:
      - sleep
      - "3600"
    resources:
      requests:
        memory: "1Gi"
        cpu: "500m"
      limits:
        memory: "2Gi"
        cpu: "1"
:wq

kubectl describe pod podquota


Question 30:

vi q30.yaml

apiVersion: v1
kind: Pod
metadata:
  labels:
    run: podsel
  name: podsel
spec:
  containers:
  - image: busybox:latest
    name: podsel
    args:
      - sleep
      - "3600"
  nodeSelector:
    kind: special
:wq

kubectl label nodes worker1 kind=special
kubectl apply -f q30.yaml
kubectl get pods -o wide


Question 31:

vi q31.yaml

apiVersion: v1
kind: Pod
metadata:
  labels:
    run: podaff
  name: podaff
spec:
  containers:
  - image: busybox:latest
    name: podaff
    args:
      - sleep
      - "3600"
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: run
                operator: In
                values:
                  - podsel #Need to create this pod before you run
          topologyKey: kubernetes.io/hostname
:wq

kubectl apply -f q31.yaml
kubectl get pods -o wide


Question 32:


vi q32.yaml

apiVersion: v1
kind: Pod
metadata:
  labels:
    run: podtol
  name: podtol
spec:
  containers:
  - image: busybox:latest
    name: podtol
    args:
      - sleep
      - "3600"
  tolerations:
  - key: "type"
    operator: "Equal"
    value: "special"
    effect: "NoSchedule"
:wq

kubectl taint node worker1 type=special:NoSchedule
kubectl cordon worker2
kubectl apply -f q32.yaml
kubectl get pods -o wide
kubectl uncordon worker2
kubectl taint node worker1 type=special:NoSchedule- 



Question 33:

vi q33.yaml

apiVersion: v1
kind: Pod
metadata:
  labels:
    run: podnode
  name: podnode
spec:
  containers:
  - image: busybox:latest
    name: podnode
    args:
      - sleep
      - "3600"
  nodeName: worker2
:wq

kubectl get pods -o wide


Labs - Question 34


To Backup:
ETCDCTL_API=3 etcdctl --endpoints=https://127.0.0.1:2379 --cacert=/etc/kubernetes/pki/etcd/ca.crt --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.key snapshot save /opt/software/etcd/etcd-snapshot.db

#To restore:
rm -rf /var/lib/etcd 
ETCDCTL_API=3 etcdctl --endpoints=https://127.0.0.1:2379 --cacert=/etc/kubernetes/pki/etcd/ca.crt    --name=manager1 --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.key     --data-dir=/var/lib/etcd --initial-cluster=manager1=https://172.24.0.200:2380 --initial-cluster-token etcd-cluster-1 --initial-advertise-peer-urls=https://172.24.0.200:2380 snapshot restore /opt/software/etcd/etcd-snapshot.db


Labs - Question 35

kubectl config get-contexts
kubectl config get-contexts -o name > /opt/software/cka/cnames

kubectl config current-context

cat ~/.kube/config | grep current-context



Labs - Question 36

kubectl get pod -A --sort-by=.metadata.creationTimestamp
kubectl get pod -A --sort-by=.metadata.uid

To Get UID
kubectl get pods -A -o=jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.metadata.uid}{"\n"}{end}'



Labs - Question 37


Hands On Check the video please.



Labs - Question 38

Please refer the git page named "Authx2-Contexts"


Labs - Question 39

kubectl run dns-resolve --image=nginx
kubectl expose pod dns-resolve --name=dns-resolve-service --port=80 --target-port=80 --type=ClusterIP
kubectl run lookup-pod --image=busybox:1.28 --rm -it --restart=Never -- nslookup dns-resolve-service > /opt/software/cka/nginx.dns


Labs - Question 40

vi q40.yaml


apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: network
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: dev # You can add pod labels to match specific pods if needed
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - ipBlock:
        cidr: 192.168.1.0/24  # Define the IP range to allow traffic from
        except:
        - 192.168.1.10/32    # Define the IP range to exclude from blocking
    ports:
    - protocol: TCP
      port: 6379            # Specify the port for ingress traffic
  egress:
  - to:
    - ipBlock:
        cidr: 10.10.10.0/24  # Define the IP range to allow egress traffic to
    ports:
    - protocol: TCP
      port: 5978             # Specify the port for egress traffic

:wq


Labs - Question 41:


kubectl create ns myns
kubectl run nginx --image=nginx --namespace myns

vi 41.yaml

# Create Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: mypolicy
  namespace: myns
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: myns
    ports:
    - protocol: TCP
      port: 80


















